// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Tshirty4579;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainrightBack;
    public static SpeedController driveTrainrightFront;
    public static SpeedControllerGroup driveTrainrightMotors;
    public static SpeedController driveTrainleftFront;
    public static SpeedController driveTrainleftBack;
    public static SpeedControllerGroup driveTrainleftMotors;
    public static DifferentialDrive driveTrainrobotDrive;
    public static Encoder driveTraindriveEncoder;
    public static SpeedController aimeraimMotor;
    public static DigitalInput aimerfrontSwitch;
    public static DigitalInput aimerbackSwitch;
    public static AnalogPotentiometer aimeraimPot;
    public static Solenoid shooterrobotSole;
    public static Compressor shootercompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainrightBack = new VictorSP(1);
        LiveWindow.addActuator("driveTrain", "rightBack", (VictorSP) driveTrainrightBack);
        driveTrainrightBack.setInverted(false);
        driveTrainrightFront = new VictorSP(0);
        LiveWindow.addActuator("driveTrain", "rightFront", (VictorSP) driveTrainrightFront);
        driveTrainrightFront.setInverted(false);
        driveTrainrightMotors = new SpeedControllerGroup(driveTrainrightFront, driveTrainrightBack  );
        LiveWindow.addActuator("driveTrain", "rightMotors", driveTrainrightMotors);
        
        driveTrainleftFront = new VictorSP(3);
        LiveWindow.addActuator("driveTrain", "leftFront", (VictorSP) driveTrainleftFront);
        driveTrainleftFront.setInverted(true);
        driveTrainleftBack = new VictorSP(2);
        LiveWindow.addActuator("driveTrain", "leftBack", (VictorSP) driveTrainleftBack);
        driveTrainleftBack.setInverted(true);
        driveTrainleftMotors = new SpeedControllerGroup(driveTrainleftFront, driveTrainleftBack  );
        LiveWindow.addActuator("driveTrain", "leftMotors", driveTrainleftMotors);
        
        driveTrainrobotDrive = new DifferentialDrive(driveTrainleftMotors, driveTrainrightMotors);
        LiveWindow.addActuator("driveTrain", "robotDrive", driveTrainrobotDrive);
        driveTrainrobotDrive.setSafetyEnabled(false);
        driveTrainrobotDrive.setExpiration(0.1);
        driveTrainrobotDrive.setMaxOutput(1.0);

        driveTraindriveEncoder = new Encoder(2, 3, false, EncodingType.k1X);
        LiveWindow.addSensor("driveTrain", "driveEncoder", driveTraindriveEncoder);
        driveTraindriveEncoder.setDistancePerPulse(0.07536);
        driveTraindriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        aimeraimMotor = new VictorSP(4);
        LiveWindow.addActuator("aimer", "aimMotor", (VictorSP) aimeraimMotor);
        aimeraimMotor.setInverted(false);
        aimerfrontSwitch = new DigitalInput(0);
        LiveWindow.addSensor("aimer", "frontSwitch", aimerfrontSwitch);
        
        aimerbackSwitch = new DigitalInput(1);
        LiveWindow.addSensor("aimer", "backSwitch", aimerbackSwitch);
        
        aimeraimPot = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("aimer", "aimPot", aimeraimPot);
        
        shooterrobotSole = new Solenoid(0, 0);
        LiveWindow.addActuator("shooter", "robotSole", shooterrobotSole);
        
        shootercompressor = new Compressor(0);
        LiveWindow.addActuator("shooter", "compressor", shootercompressor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
        
        
        
    }
}
